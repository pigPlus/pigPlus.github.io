<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>手写实现Promise</title>
    <link href="/2022/04/11/promise/"/>
    <url>/2022/04/11/promise/</url>
    
    <content type="html"><![CDATA[<h1 id="Promise基本特征"><a href="#Promise基本特征" class="headerlink" title="Promise基本特征"></a>Promise基本特征</h1><blockquote><ol><li>promise的三个状态: pending(默认状态), fulfilled, rejected. promise只能从pending状态到fulfilled或者从pending状态到rejected, 状态一旦确认, 就不会再改变.</li><li>new Promise时, 需要传递一个executor()执行器, 执行器立即执行. executor接受两个参数, resolve和reject.</li><li>promise有一个value用来保存成功的值, 有一个reason用来保存失败的值.</li><li>promise有一个then方法, then接受两个参数, 分别是promise成功的回调onFulfilled和失败的回调onRejected. 如果promise成功, 调用then时执行onFulfilled, 参数是promise的value, 如果promise失败, 调用then时执行onRejected 参数是promise的reason.</li><li>如果then中抛出异常, 就把这个异常作为参数传递给下一个then的失败的回调onRejected.</li></ol></blockquote><h2 id="实现promise"><a href="#实现promise" class="headerlink" title="实现promise"></a>实现promise</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 三个状态</span><br><span class="hljs-keyword">const</span> PENDING = <span class="hljs-string">&#x27;PENDING&#x27;</span><br><span class="hljs-keyword">const</span> FULFILLED = <span class="hljs-string">&#x27;FULFILLED&#x27;</span><br><span class="hljs-keyword">const</span> REJECTED = <span class="hljs-string">&#x27;REJECTED&#x27;</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Promise</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">executor</span>)</span> &#123;<br>        <span class="hljs-comment">// 默认状态为pending</span><br>        <span class="hljs-built_in">this</span>.status = PENDING;<br>        <span class="hljs-comment">// 保存成功的值</span><br>        <span class="hljs-built_in">this</span>.value = <span class="hljs-literal">undefined</span>;<br>        <span class="hljs-comment">// 保存失败的值</span><br>        <span class="hljs-built_in">this</span>.reason = <span class="hljs-literal">undefined</span>;<br><br>        <span class="hljs-comment">//调用resolve则成功</span><br>        <span class="hljs-keyword">let</span> resolve = <span class="hljs-function">(<span class="hljs-params">value</span>) =&gt;</span> &#123;<br>            <span class="hljs-comment">// 只有当状态为pending时才能改变状态</span><br>            <span class="hljs-keyword">if</span>(<span class="hljs-built_in">this</span>.status === PENDING) &#123;<br>                <span class="hljs-built_in">this</span>.status = FULFILLED;<br>                <span class="hljs-comment">// 将成功的值保存起来</span><br>                <span class="hljs-built_in">this</span>.value = value;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">let</span> reject = <span class="hljs-function">(<span class="hljs-params">reason</span>) =&gt;</span> &#123;<br>            <span class="hljs-keyword">if</span>(<span class="hljs-built_in">this</span>.status === PENDING) &#123;<br>                <span class="hljs-built_in">this</span>.status = REJECTED;<br>                <span class="hljs-comment">// 将失败的值保存起来</span><br>                <span class="hljs-built_in">this</span>.reason = reason;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// 立即执行, 将resolve和reject函数传给使用者</span><br>            executor(resolve, reject);<br>        &#125; <span class="hljs-keyword">catch</span>(error) &#123;<br>            <span class="hljs-comment">// 发生失败时执行reject</span><br>            reject(error);<br>        &#125;<br>    &#125;<br>     <span class="hljs-comment">// then方法, 接受两个参数onFulfilled和onRejected</span><br>     <span class="hljs-function"><span class="hljs-title">then</span>(<span class="hljs-params">onFulfilled, onRejected</span>)</span> &#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">this</span>.status === FULFILLED) &#123;<br>            onFulfilled(<span class="hljs-built_in">this</span>.value);<br>        &#125;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">this</span>.status === REJECTED) &#123;<br>            onRejected(<span class="hljs-built_in">this</span>.reason);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>使用一波:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> promise = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>    resolve(<span class="hljs-string">&#x27;promise&#x27;</span>)<br>&#125;)<br>.then(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(res,<span class="hljs-string">&#x27;成功&#x27;</span>);<br>&#125;, <span class="hljs-function">(<span class="hljs-params">err</span>) =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(err, <span class="hljs-string">&#x27;失败&#x27;</span>);<br>&#125;)<br></code></pre></td></tr></table></figure><p>控制台输出:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">promise 成功<br></code></pre></td></tr></table></figure><p>以上只实现了同步操作, 但是当executor中传入了一个异步操作, 执行then方法时, 由于这个异步, 不能使promise的pending状态改变, 我们需要将成功和失败的回调存起来, 在这个异步任务被执行时, 触发resolve和reject, 依次调用成功和失败的回调:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 三个状态</span><br><span class="hljs-keyword">const</span> PENDING = <span class="hljs-string">&#x27;PENDING&#x27;</span><br><span class="hljs-keyword">const</span> FULFILLED = <span class="hljs-string">&#x27;FULFILLED&#x27;</span><br><span class="hljs-keyword">const</span> REJECTED = <span class="hljs-string">&#x27;REJECTED&#x27;</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Promise</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">executor</span>)</span> &#123;<br>        <span class="hljs-built_in">this</span>.status = PENDING;<br>        <span class="hljs-built_in">this</span>.value = <span class="hljs-literal">undefined</span>;<br>        <span class="hljs-built_in">this</span>.reason = <span class="hljs-literal">undefined</span>;<br>        <span class="hljs-comment">// 存放成功的回调</span><br>        <span class="hljs-built_in">this</span>.onFulfilledCallback = [];<br>        <span class="hljs-comment">//存放失败的回调</span><br>        <span class="hljs-built_in">this</span>.onRejectedCallback = [];<br><br>        <span class="hljs-keyword">let</span> resolve = <span class="hljs-function">(<span class="hljs-params">value</span>) =&gt;</span> &#123;<br>            <span class="hljs-keyword">if</span>(<span class="hljs-built_in">this</span>.status === PENDING) &#123;<br>                <span class="hljs-built_in">this</span>.status = FULFILLED;<br>                <span class="hljs-built_in">this</span>.value = value;<br>                <span class="hljs-comment">// 将对应的函数依次执行</span><br>                <span class="hljs-built_in">this</span>.onFulfilledCallback.forEach(<span class="hljs-function"><span class="hljs-params">fn</span> =&gt;</span> fn());<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">let</span> reject = <span class="hljs-function">(<span class="hljs-params">reason</span>) =&gt;</span> &#123;<br>            <span class="hljs-keyword">if</span>(<span class="hljs-built_in">this</span>.status === PENDING) &#123;<br>                <span class="hljs-built_in">this</span>.status = REJECTED;<br>                <span class="hljs-built_in">this</span>.reason = reason;<br>                <span class="hljs-built_in">this</span>.onRejectedCallback.forEach(<span class="hljs-function"><span class="hljs-params">fn</span> =&gt;</span> fn());<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            executor(resolve, reject);<br>        &#125; <span class="hljs-keyword">catch</span>(error) &#123;<br>            reject(error);<br>        &#125;<br>    &#125;<br>     <span class="hljs-function"><span class="hljs-title">then</span>(<span class="hljs-params">onFulfilled, onRejected</span>)</span> &#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">this</span>.status === FULFILLED) &#123;<br>            onFulfilled(<span class="hljs-built_in">this</span>.value);<br>        &#125;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">this</span>.status === REJECTED) &#123;<br>            onRejected(<span class="hljs-built_in">this</span>.reason);<br>        &#125;<br>        <span class="hljs-comment">// 如果是pending状态, 则将onFulfilled存放起来, 等状态确定再执行</span><br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">this</span>.status === PENDING) &#123;<br>            <span class="hljs-built_in">this</span>.onFulfilledCallback.push(<span class="hljs-function">() =&gt;</span> &#123;<br>                onFulfilled(<span class="hljs-built_in">this</span>.value);<br>            &#125;)<br>        &#125;<br>        <span class="hljs-comment">// 如果是pending状态, 则将onRejected存放起来, 等状态确定再执行</span><br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">this</span>.status === PENDING) &#123;<br>            <span class="hljs-built_in">this</span>.onRejectedCallback.push(<span class="hljs-function">() =&gt;</span> &#123;<br>                onRejected(<span class="hljs-built_in">this</span>.reason);<br>            &#125;)<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>使用一波:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> promise = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;resolve(<span class="hljs-string">&#x27;promise&#x27;</span>)&#125;, <span class="hljs-number">2000</span>)<br>&#125;)<br>.then(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(res,<span class="hljs-string">&#x27;成功&#x27;</span>);<br>&#125;, <span class="hljs-function">(<span class="hljs-params">err</span>) =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(err, <span class="hljs-string">&#x27;失败&#x27;</span>);<br>&#125;)<br></code></pre></td></tr></table></figure><p>2秒后控制台输出:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">promise 成功<br></code></pre></td></tr></table></figure><p>我们都知道, promise一个极大的优势就是可以使用then的链式调用: 上一个then里返回的值可以在下一个then中拿到. 结合 Promise/A+ 规范梳理一下思路：</p><blockquote><ol><li>then的参数onFulfilled和onRejected可以缺省, 如果它们俩不是函数, 将其忽略, 且依旧可以在下一个then中拿到之前返回的值</li><li>每一个then都会返回一个新的promise</li><li>如果then的返回值x是一个普通值, 将会作为参数传递给下一个then成功的回调中; 如果x是一个promise, 会等这个promise执行完, 如果promise成功, 就走下一个then的成功, 如果失败或抛出异常, 就走下一个then的失败</li><li>如果then中抛出异常, 会把这个异常作为参数传递给下一个then的失败回调中</li><li>如果then的返回值和promise是同一个引用对象, 造成循环, 则抛出异常, 把异常传递给下一个then的失败回调中</li></ol></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 三个状态</span><br><span class="hljs-keyword">const</span> PENDING = <span class="hljs-string">&#x27;PENDING&#x27;</span><br><span class="hljs-keyword">const</span> FULFILLED = <span class="hljs-string">&#x27;FULFILLED&#x27;</span><br><span class="hljs-keyword">const</span> REJECTED = <span class="hljs-string">&#x27;REJECTED&#x27;</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Promise</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">executor</span>)</span> &#123;<br>        <span class="hljs-built_in">this</span>.status = PENDING;<br>        <span class="hljs-built_in">this</span>.value = <span class="hljs-literal">undefined</span>;<br>        <span class="hljs-built_in">this</span>.reason = <span class="hljs-literal">undefined</span>;<br>        <span class="hljs-built_in">this</span>.onFulfilledCallback = [];<br>        <span class="hljs-built_in">this</span>.onRejectedCallback = [];<br><br>        <span class="hljs-keyword">let</span> resolve = <span class="hljs-function">(<span class="hljs-params">value</span>) =&gt;</span> &#123;<br>            <span class="hljs-keyword">if</span>(<span class="hljs-built_in">this</span>.status === PENDING) &#123;<br>                <span class="hljs-built_in">this</span>.status = FULFILLED;<br>                <span class="hljs-comment">// 将成功的值保存起来</span><br>                <span class="hljs-built_in">this</span>.value = value;<br>                <span class="hljs-built_in">this</span>.onFulfilledCallback.forEach(<span class="hljs-function"><span class="hljs-params">fn</span> =&gt;</span> fn());<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">let</span> reject = <span class="hljs-function">(<span class="hljs-params">reason</span>) =&gt;</span> &#123;<br>            <span class="hljs-keyword">if</span>(<span class="hljs-built_in">this</span>.status === PENDING) &#123;<br>                <span class="hljs-built_in">this</span>.status = REJECTED;<br>                <span class="hljs-built_in">this</span>.reason = reason;<br>                <span class="hljs-built_in">this</span>.onRejectedCallback.forEach(<span class="hljs-function"><span class="hljs-params">fn</span> =&gt;</span> fn());<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            executor(resolve, reject);<br>        &#125; <span class="hljs-keyword">catch</span>(error) &#123;<br>            reject(error);<br>        &#125;<br>    &#125;<br>     <span class="hljs-function"><span class="hljs-title">then</span>(<span class="hljs-params">onFulfilled, onRejected</span>)</span> &#123;<br>        onFulfilled = <span class="hljs-keyword">typeof</span> onFulfilled === <span class="hljs-string">&#x27;function&#x27;</span> ? onFulfilled : <span class="hljs-function"><span class="hljs-params">v</span> =&gt;</span> v;<br>        <span class="hljs-comment">// 因为错误的值要让后面访问到, 所以这里抛出一个错误</span><br>        onRejected = <span class="hljs-keyword">typeof</span> onRejected === <span class="hljs-string">&#x27;function&#x27;</span> ? onRejected : <span class="hljs-function"><span class="hljs-params">err</span> =&gt;</span> &#123; <span class="hljs-keyword">throw</span> err &#125;;<br>        <span class="hljs-comment">// 每一个then都返回一个新的promise</span><br>        <span class="hljs-keyword">let</span> promise2 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>            <span class="hljs-keyword">if</span>(<span class="hljs-built_in">this</span>.status === FULFILLED) &#123;<br>            <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    <span class="hljs-keyword">let</span> x = onFulfilled(<span class="hljs-built_in">this</span>.value);<br>                    newPromise(promise2, x, resolve, reject);<br>                &#125; <span class="hljs-keyword">catch</span> (e) &#123;<br>                    reject(e);<br>                &#125;<br>            &#125;, <span class="hljs-number">0</span>)<br>        &#125;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">this</span>.status === REJECTED) &#123;<br>            <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    <span class="hljs-keyword">let</span> x = onRejected(<span class="hljs-built_in">this</span>.reason);<br>                    newPromise(promise2, x, resolve, reject);<br>                &#125; <span class="hljs-keyword">catch</span> (e) &#123;<br>                    reject(e);<br>                &#125;<br>            &#125;, <span class="hljs-number">0</span>)<br>        &#125;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">this</span>.status === PENDING) &#123;<br>            <span class="hljs-built_in">this</span>.onFulfilledCallback.push(<span class="hljs-function">() =&gt;</span> &#123;<br>                <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>                    <span class="hljs-keyword">try</span> &#123;<br>                        <span class="hljs-keyword">let</span> x = onFulfilled(<span class="hljs-built_in">this</span>.value);<br>                        newPromise(promise2, x, resolve, reject);<br>                    &#125; <span class="hljs-keyword">catch</span> (e) &#123;<br>                        reject(e);<br>                    &#125;<br>                &#125;, <span class="hljs-number">0</span>)<br>            &#125;)<br>        &#125;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">this</span>.status === PENDING) &#123;<br>            <span class="hljs-built_in">this</span>.onRejectedCallback.push(<span class="hljs-function">() =&gt;</span> &#123;<br>                <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>                    <span class="hljs-keyword">try</span> &#123;<br>                        <span class="hljs-keyword">let</span> x = onRejected(<span class="hljs-built_in">this</span>.reason);<br>                        newPromise(promise2, x, resolve, reject);<br>                    &#125; <span class="hljs-keyword">catch</span> (e) &#123;<br>                        reject(e);<br>                    &#125;<br>                &#125;, <span class="hljs-number">0</span>)<br>            &#125;)<br>        &#125;<br>        &#125;)<br>        <span class="hljs-keyword">return</span> promise2;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">const</span> newPromise = <span class="hljs-function">(<span class="hljs-params">promise2, x, resolve, reject</span>) =&gt;</span> &#123;<br>    <span class="hljs-comment">// promise2和x是一个引用值, 造成循环, 抛出错误</span><br>    <span class="hljs-keyword">if</span>(promise2 === x) &#123;<br>        <span class="hljs-keyword">return</span> reject(<span class="hljs-keyword">new</span> <span class="hljs-built_in">TypeError</span>(<span class="hljs-string">&#x27;Chaining cycle detected for promise #&lt;Promise&gt;&#x27;</span>));<br>    &#125;<br>    <span class="hljs-comment">// called用来使状态只变化一次</span><br>    <span class="hljs-keyword">let</span> called;<br>    <span class="hljs-keyword">if</span>((<span class="hljs-keyword">typeof</span> x === <span class="hljs-string">&#x27;object&#x27;</span> &amp;&amp; x != <span class="hljs-literal">null</span>) || <span class="hljs-keyword">typeof</span> x === <span class="hljs-string">&#x27;function&#x27;</span>) &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//为了判断resolve之后就不用再reject了</span><br>            <span class="hljs-keyword">let</span> then = x.then;<br>            <span class="hljs-keyword">if</span>(<span class="hljs-keyword">typeof</span> then === <span class="hljs-string">&#x27;function&#x27;</span>) &#123;<br>                then.call(x, <span class="hljs-function"><span class="hljs-params">y</span> =&gt;</span> &#123;<br>                    <span class="hljs-keyword">if</span>(called) <span class="hljs-keyword">return</span>;<br>                    called = <span class="hljs-literal">true</span>;<br>                    <span class="hljs-comment">// 递归, promise中可能还存在promise</span><br>                    newPromise(promise2, y, resolve, reject);<br>                &#125;, <span class="hljs-function"><span class="hljs-params">r</span> =&gt;</span> &#123;<br>                    <span class="hljs-keyword">if</span>(called) <span class="hljs-keyword">return</span>;<br>                    called = <span class="hljs-literal">true</span>;<br>                    reject(r);<br>                &#125;)<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-comment">// x是一个普通值的情况</span><br>                resolve(x);<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (error) &#123;<br>            <span class="hljs-keyword">if</span>(called) <span class="hljs-keyword">return</span>;<br>            called = <span class="hljs-literal">true</span>;<br>            reject(error)<br>        &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">// x是一个普通值的情况</span><br>        resolve(x);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>使用一波: </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> promise = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>    resolve(<span class="hljs-string">&#x27;promise&#x27;</span>);<br>&#125;)<br>.then(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(res,<span class="hljs-string">&#x27;成功&#x27;</span>);<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Error</span>(<span class="hljs-string">&#x27;err&#x27;</span>)<br>&#125;, <span class="hljs-function">(<span class="hljs-params">err</span>) =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(err, <span class="hljs-string">&#x27;失败&#x27;</span>);<br>&#125;)<br>.then(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(res);<br>&#125;, <span class="hljs-function"><span class="hljs-params">err</span> =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(err);<br>&#125;)<br></code></pre></td></tr></table></figure><p>控制台输出:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript">promise 成功<br>test.js:<span class="hljs-number">148</span> <span class="hljs-built_in">Error</span>: err<br>    at test.js:<span class="hljs-number">141</span>:<span class="hljs-number">11</span><br>    at test.js:<span class="hljs-number">56</span>:<span class="hljs-number">29</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>防抖与节流</title>
    <link href="/2022/04/08/debounce-throttle/"/>
    <url>/2022/04/08/debounce-throttle/</url>
    
    <content type="html"><![CDATA[<h1 id="防抖与节流"><a href="#防抖与节流" class="headerlink" title="防抖与节流"></a>防抖与节流</h1><h2 id="防抖-debounce"><a href="#防抖-debounce" class="headerlink" title="防抖(debounce)"></a>防抖(debounce)</h2><ul><li>什么是防抖?<blockquote><p>在事件被触发n秒后再执行回调, 如果在这n秒内又被触发, 则重新计时。</p></blockquote></li><li>应用场景<blockquote><p>搜索联想, 用户在不断输入值时, 通过防抖来节约请求资源。<br>窗口resize的时候, 不断调整浏览器窗口大小, 用防抖让其只触发一次。</p></blockquote></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;debounce&quot;</span>&gt;<br>    <span class="hljs-comment">// 总是在鼠标点击1s后执行防抖函数, 如果不停点击, 则在最后一次点击的1s后执行</span><br>    <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btn1&quot;</span>&gt;</span>点我防抖<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br>&lt;/div&gt;<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">debounce</span>(<span class="hljs-params">fn</span>) </span>&#123;<br>    <span class="hljs-keyword">let</span> timer = <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-comment">// 如果正在计时的过程中, 并触发了相同事件, 则清除计时</span><br>        <span class="hljs-keyword">if</span> (timer) &#123;<br>            <span class="hljs-built_in">clearTimeout</span>(timer);<br>        &#125;<br>        <span class="hljs-comment">// 没有计时, 则开始新计时</span><br>        timer = <span class="hljs-built_in">setTimeout</span>(fn, <span class="hljs-number">1000</span>);<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">sayhello</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;hello!&#x27;</span>);<br>&#125;<br><span class="hljs-built_in">window</span>.onload = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">let</span> btn1 = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;btn1&#x27;</span>);<br>    btn1.addEventListener(<span class="hljs-string">&#x27;click&#x27;</span>, debounce(sayhello))<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="节流-throttle"><a href="#节流-throttle" class="headerlink" title="节流(throttle)"></a>节流(throttle)</h2><ul><li>什么是节流?<blockquote><p>规定在一个单位时间内，只能触发一次函数。如果这个单位时间内触发多次函数，只有一次生效。</p></blockquote></li><li>应用场景<blockquote><p>鼠标不断点击, (单位时间内)时间只触发一次。<br>监听滚动事件, 滑到底部加载更多。</p></blockquote></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;throttle&quot;</span>&gt;<br>    <span class="hljs-comment">// 不管点击多少次, 都是1s内执行一次节流函数</span><br>    <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btn2&quot;</span>&gt;</span>点我节流<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br>&lt;/div&gt;<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">throttle</span>(<span class="hljs-params">fn</span>) </span>&#123;<br>    <span class="hljs-comment">//保存一个标记</span><br>    <span class="hljs-keyword">let</span> valid = <span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-comment">// 不为true则中断函数(休息时间, 不执行)</span><br>        <span class="hljs-keyword">if</span>(!valid) &#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-comment">//将valid设为false, 防止执行之前再被执行(工作时间)</span><br>        valid = <span class="hljs-literal">false</span>;<br>        <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>            fn();<br>            <span class="hljs-comment">//执行完成后, 将valid再次设为true</span><br>            valid = <span class="hljs-literal">true</span>;<br>        &#125;, <span class="hljs-number">1000</span>)<br>    &#125;<br>&#125; <br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">sayhello</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;hello!&#x27;</span>);<br>&#125;<br><span class="hljs-built_in">window</span>.onload = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">let</span> btn2 = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;btn2&#x27;</span>);<br>    btn2.addEventListener(<span class="hljs-string">&#x27;click&#x27;</span>, throttle(sayhello))<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>CSS实现垂直居中对齐的方式</title>
    <link href="/2021/12/07/test/"/>
    <url>/2021/12/07/test/</url>
    
    <content type="html"><![CDATA[<h1 id="文字的居中"><a href="#文字的居中" class="headerlink" title="文字的居中"></a>文字的居中</h1><h2 id="text-align和line-height"><a href="#text-align和line-height" class="headerlink" title="text-align和line-height"></a>text-align和line-height</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;text&quot;</span>&gt;<br>    垂直水平居中<br>&lt;/div&gt;<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript">.text &#123;<br>    <span class="hljs-attr">width</span>: 500px;<br>    height: 250px;<br>    background-color: red;<br>    text-align: center;<br>    <span class="hljs-comment">/* line-height与height一致 */</span><br>    line-height: 250px; <br>&#125;<br></code></pre></td></tr></table></figure><h1 id="块级元素-不定宽高的块级元素与行内元素均适用"><a href="#块级元素-不定宽高的块级元素与行内元素均适用" class="headerlink" title="块级元素, 不定宽高的块级元素与行内元素均适用"></a>块级元素, 不定宽高的块级元素与行内元素均适用</h1><h2 id="绝对定位"><a href="#绝对定位" class="headerlink" title="绝对定位"></a>绝对定位</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;container&quot;</span>&gt;<br>        <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;item&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;width: 100px; height: 100px; background: #999;&quot;</span>&gt;</span></span><br><span class="xml">          块状元素</span><br><span class="xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>      &lt;/div&gt;<br>      <br>      <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;item&quot;</span>&gt;</span>不定高宽的块状元素<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>      <br>      <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;item&quot;</span>&gt;</span>行内元素<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs javascript">.container &#123;<br>    <span class="hljs-attr">position</span>: relative;<br>  &#125;<br>  <br>  .item &#123;<br>    <span class="hljs-attr">position</span>: absolute;<br>    top: <span class="hljs-number">50</span>%;<br>    left: <span class="hljs-number">50</span>%;<br>    transform: translate(-<span class="hljs-number">50</span>%, -<span class="hljs-number">50</span>%);<br>  &#125;<br>  <br>  .item &#123;<br>    <span class="hljs-attr">padding</span>: 1rem;<br>    border: 1px solid #<span class="hljs-number">999</span>;<br>  &#125;<br>  <br>  .container &#123;<br>    <span class="hljs-attr">height</span>: 12rem;<br>    background: #ccc;<br>    margin: 1rem;<br>  &#125;<br></code></pre></td></tr></table></figure><h2 id="flex布局"><a href="#flex布局" class="headerlink" title="flex布局"></a>flex布局</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs javascript">.container &#123;<br>    <span class="hljs-attr">display</span>: flex;<br>    justify-content: center;<br>    align-items: center;<br>  &#125;<br>  <br>  .item &#123;<br>    <span class="hljs-attr">padding</span>: 1rem;<br>    border: 1px solid #<span class="hljs-number">999</span>;<br>  &#125;<br>  <br>  .container &#123;<br>    <span class="hljs-attr">height</span>: 12rem;<br>    background: #ccc;<br>    margin: 1rem;<br>  &#125;<br></code></pre></td></tr></table></figure><p>或者</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><br>.container &#123;<br>    <span class="hljs-attr">display</span>: flex;<br>  &#125;<br><br>  .item &#123;<br>    <span class="hljs-attr">margin</span>: auto;<br>  &#125;<br>  <br>  .item &#123;<br>    <span class="hljs-attr">padding</span>: 1rem;<br>    border: 1px solid #<span class="hljs-number">999</span>;<br>  &#125;<br>  <br>  .container &#123;<br>    <span class="hljs-attr">height</span>: 12rem;<br>    background: #ccc;<br>    margin: 1rem;<br>  &#125;<br></code></pre></td></tr></table></figure><h2 id="grid布局"><a href="#grid布局" class="headerlink" title="grid布局"></a>grid布局</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs javascript">.container &#123;<br>    <span class="hljs-attr">display</span>: grid;<br>    place-content: center;<br>    <span class="hljs-comment">// place-items: center;</span><br>  &#125;<br>  <br>  .item &#123;<br>    <span class="hljs-attr">padding</span>: 1rem;<br>    border: 1px solid #<span class="hljs-number">999</span>;<br>  &#125;<br>  <br>  .container &#123;<br>    <span class="hljs-attr">height</span>: 12rem;<br>    background: #ccc;<br>    margin: 1rem;<br>  &#125;<br></code></pre></td></tr></table></figure><p>或者</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs javascript">.container &#123;<br>    <span class="hljs-attr">display</span>: grid;<br>  &#125;<br><br>  .item &#123;<br>    <span class="hljs-attr">margin</span>: auto;<br>  &#125;<br>  <br>  .item &#123;<br>    <span class="hljs-attr">padding</span>: 1rem;<br>    border: 1px solid #<span class="hljs-number">999</span>;<br>  &#125;<br>  <br>  .container &#123;<br>    <span class="hljs-attr">height</span>: 12rem;<br>    background: #ccc;<br>    margin: 1rem;<br>  &#125;<br></code></pre></td></tr></table></figure><h1 id="相对父元素绝对定位"><a href="#相对父元素绝对定位" class="headerlink" title="相对父元素绝对定位"></a>相对父元素绝对定位</h1><p>此方法只对确认宽高的块状元素有效</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs javascript">.container &#123;<br>    <span class="hljs-attr">position</span>: relative;<br>  &#125;<br>  .item &#123;<br>    <span class="hljs-attr">position</span>: absolute;<br>    left: <span class="hljs-number">0</span>;<br>    top: <span class="hljs-number">0</span>;<br>    right: <span class="hljs-number">0</span>;<br>    bottom: <span class="hljs-number">0</span>;<br>    margin: auto;<br>  &#125;<br>  <br>  .item &#123;<br>    <span class="hljs-attr">padding</span>: 1rem;<br>    border: 1px solid #<span class="hljs-number">999</span>;<br>  &#125;<br>  <br>  .container &#123;<br>    <span class="hljs-attr">height</span>: 12rem;<br>    background: #ccc;<br>    margin: 1rem;<br>  &#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
